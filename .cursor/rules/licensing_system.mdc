---
description: Licensing System Activity Guidelines for the Figma Plugin Project
globs: 
---

# Licensing System Activity Guidelines

## Overview
This document outlines the technical implementation details of the licensing and subscription model in the Figma Plugin Project. The system uses LemonSqueezy as the payment and license management provider, with a focus on secure validation and seamless user experience.

## Implementation Status

### Completed Features ‚úì
- Basic license validation system
- License key storage and persistence
- Premium feature gating logic
- License status management
- UI components for license input and status display
- Error handling for license operations
- LemonSqueezy API integration
- License activation flow
- License deactivation flow
- Automatic state recovery
- User notifications and feedback
- Class limit enforcement after deactivation

### In Progress üîÑ
- Usage tracking implementation
- Analytics integration
- Performance monitoring

### Pending Features ‚è≥
- Remote validation endpoint
- License renewal notifications
- Trial system implementation
- Offline validation support
- License transfer system

## Technical Architecture

### License Service ‚úì
```typescript
class LicenseService {
  private static instance: LicenseService;
  
  public async validateLicense(key: string): Promise<LicenseStatus>;
  public async activateLicense(key: string): Promise<LicenseStatus>;
  public async deactivateLicense(key: string): Promise<boolean>;
  
  private async makeRequest(endpoint: string, options: RequestInit): Promise<LemonSqueezyResponse>;
  private mapResponseToLicenseStatus(response: LemonSqueezyResponse): LicenseStatus;
}
```

### License Types ‚úì
```typescript
interface LicenseStatus {
  tier: 'free' | 'premium';
  isValid: boolean;
  expiresAt?: string;
  features: string[];
}

interface LemonSqueezyResponse {
  success: boolean;
  error?: string;
  license?: {
    status: 'active' | 'inactive' | 'expired';
    key: string;
    expires_at?: string;
    activation_limit: number;
    activations_count: number;
  };
}
```

## Integration with LemonSqueezy

### API Configuration ‚úì
```typescript
const LEMONSQUEEZY_CONFIG = {
  API_ENDPOINT: 'https://api.lemonsqueezy.com/v1',
  LICENSE_API_ENDPOINT: 'https://api.lemonsqueezy.com/v1/licenses',
  API_KEY: process.env.LEMONSQUEEZY_API_KEY,
  STORE_ID: process.env.LEMONSQUEEZY_STORE_ID,
  PRODUCT_ID: process.env.LEMONSQUEEZY_PRODUCT_ID
};
```

### License Validation Flow ‚úì
1. User enters license key
2. System attempts to activate license
3. If activation fails due to limit, attempt validation
4. Map API response to internal license status
5. Store validated status
6. Update UI with current status

### Error Handling ‚úì
```typescript
try {
  const response = await this.makeRequest('/validate', {
    method: 'POST',
    body: JSON.stringify({
      license_key: licenseKey,
      instance_name: 'Figma Plugin - Class Action'
    })
  });

  if (!response.success) {
    if (response.error?.includes('activation limit')) {
      return this.handleActivationLimit(licenseKey);
    }
    throw new Error(response.error || 'License validation failed');
  }

  return this.mapResponseToLicenseStatus(response);
} catch (error) {
  console.error('License validation error:', error);
  return this.getDefaultLicenseStatus();
}
```

## Security Considerations

### API Key Management ‚úì
- Store API keys securely in environment variables
- Use different keys for development and production
- Never expose keys in client-side code
- Implement key rotation mechanism

### License Key Storage ‚úì
- Store encrypted in Figma client storage
- Clear on plugin uninstall
- Implement secure transmission
- Handle validation failures gracefully

## Testing Strategy

### Unit Tests ‚úì
```typescript
describe('LemonSqueezy Integration', () => {
  it('should validate a real test license', async () => {
    const service = LicenseService.getInstance();
    const result = await service.validateLicense(testLicenseKey);
    expect(result.isValid).toBe(true);
    expect(result.tier).toBe('premium');
  });
});
```

### Integration Tests (Planned)
- End-to-end license activation flow
- Payment integration testing
- Error handling scenarios
- Edge cases validation

## Monitoring and Analytics (Planned)
- Track license validation attempts
- Monitor activation success rate
- Collect usage metrics
- Implement error tracking
- Generate usage reports

## Future Improvements
- Implement offline validation
- Add license transfer functionality
- Enhance error reporting
- Implement automatic renewal
- Add bulk license management
- Integrate with team features

## References
- [LemonSqueezy API Documentation](mdc:https:/docs.lemonsqueezy.com/api)
- [JWT Implementation Guide](mdc:https:/jwt.io/introduction)
- [Figma Plugin Storage Guide](mdc:https:/www.figma.com/plugin-docs/api/properties/clientStorage)