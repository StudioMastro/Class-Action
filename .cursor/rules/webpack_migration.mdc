---
description: Details the migration from webpack to Create Figma Plugin, including build system changes, UI framework updates, and implementation status. Reference for build-related tasks and UI component migrations.
globs: *.config.js, *.json, src/**/*.tsx, src/**/*.ts
---
# Migration to Create Figma Plugin

## Migration Status

### Completed Tasks
1. ‚úÖ Basic project setup with Create Figma Plugin
2. ‚úÖ TypeScript configuration
3. ‚úÖ Preact + Tailwind CSS integration
4. ‚úÖ Project structure cleanup
5. ‚úÖ UI Migration
   - Basic UI structure implemented
   - Components rendering properly
   - Event handling working
   - Layout and styling refined
   - CSS-like property display added
6. ‚úÖ Plugin Logic Migration
   - Frame properties saving/applying implemented
   - Type safety improvements completed
   - Event handling system working
   - Error handling improved
   - Style reference handling enhanced

### Current Status
1. ‚úÖ Build System:
   - Using esbuild through Create Figma Plugin
   - Build output standardized to `/build`
   - Styles bundling working with Tailwind
   - TypeScript configuration verified

2. ‚úÖ UI Framework:
   - Using Preact with @create-figma-plugin/ui
   - Components match Figma's design system
   - Event system working properly
   - Styling integrated with Tailwind CSS
   - CSS-like property display implemented

3. ‚úÖ Plugin Logic:
   - Core functionality migrated
   - Auto layout properties supported
   - Style references working with RGB values
   - Error handling improved
   - Property conversion to CSS format

4. ‚úÖ Project Structure:
   - Clean directory organization
   - Clear separation of concerns
   - Documentation updated
   - Build process streamlined

### Next Steps
1. Code Quality:
   - Add more comprehensive error handling
   - Improve type safety where needed
   - Add input validation
   - Enhance logging for debugging

2. UI Polish:
   - Add class previews
   - Improve error messages
   - Add loading states
   - Enhance accessibility

3. Testing:
   - Add unit tests
   - Implement integration tests
   - Test edge cases
   - Verify all features

## Technical Details

### Build System
- Using `esbuild` through Create Figma Plugin
- Faster build times compared to webpack
- Better TypeScript integration
- Simpler configuration

### UI Framework
- Preact for lightweight React alternative
- @create-figma-plugin/ui for native look
- Tailwind CSS for custom styling
- Event-based communication

### Plugin Logic
- TypeScript with strict checking
- Clear interface definitions
- Comprehensive error handling
- Proper async/await usage

### Project Structure
```
plugin-root/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ main.ts
‚îÇ   ‚îú‚îÄ‚îÄ ui.tsx
‚îÇ   ‚îú‚îÄ‚îÄ input.css
‚îÇ   ‚îî‚îÄ‚îÄ output.css
‚îú‚îÄ‚îÄ build/
‚îú‚îÄ‚îÄ .notes/
‚îî‚îÄ‚îÄ [config files]
```

## Benefits of Migration

1. **Development Experience**:
   - Faster build times
   - Better type checking
   - Simpler configuration
   - Native Figma components

2. **Code Quality**:
   - Stricter TypeScript checks
   - Better error handling
   - Cleaner project structure
   - Improved maintainability

3. **User Experience**:
   - Native Figma look and feel
   - Better performance
   - More reliable functionality
   - Improved error feedback

4. **Maintenance**:
   - Easier updates
   - Better documentation
   - Simpler debugging
   - Cleaner codebase

## Build System Clarification

### Previous Setup
- Custom webpack configuration
- Manual TypeScript configuration
- Manual bundling setup
- Separate configuration for UI and plugin code

### Current Setup (Create Figma Plugin)
- Uses `esbuild` (NOT webpack) as the bundler
- Pre-configured TypeScript settings
- Automated bundling process with output in `/build`
- Unified configuration for UI and plugin code
- Tailwind CSS integration with direct build output

### Key Differences
1. **Bundler**:
   - Before: webpack (manual configuration)
   - Now: esbuild (faster, pre-configured)
   - Impact: Same end result, different tooling

2. **TypeScript**:
   - Before: Same TypeScript, but with looser configuration
   - Now: Same TypeScript, but with stricter type checking
   - Impact: Need to fix type issues that were previously ignored

3. **Build Process**:
   - Before: Multiple manual configurations
   - Now: Single, unified build process
   - Impact: Simpler but less customizable

## Impact Analysis

### What Changes
1. **Build System**:
   - From: Custom webpack configuration
   - To: Create Figma Plugin (esbuild)
   - Impact: Only affects how code is compiled and bundled
   - ‚úÖ No change to plugin logic required

2. **UI Framework**:
   - From: React + shadcn/ui
   - To: Preact + @create-figma-plugin/ui
   - Impact: Only affects UI implementation
   - ‚úÖ No change to plugin logic required

3. **Type Safety**:
   - Issue: Stricter TypeScript checking in new setup
   - Impact: Need to add proper type annotations
   - ‚úÖ No change to actual logic, just better type safety

### What Stays the Same
1. **Core Plugin Logic**:
   - Frame property handling
   - Class saving/loading
   - Property application logic
   - Event handling logic

2. **Data Structure**:
   - Frame properties format
   - Saved classes structure
   - Message format between UI and plugin

## Current Status (as of January 2024)

### Completed Migrations
1. ‚úÖ Build System Migration
   - Fully migrated to Create Figma Plugin with esbuild
   - Removed webpack configuration
   - Implemented PostCSS processing
   - Configured Tailwind CSS
   - Optimized build output

2. ‚úÖ UI Framework Migration
   - Implemented Preact components
   - Integrated @create-figma-plugin/ui
   - Added Tailwind CSS for styling
   - Implemented Geist font
   - Created reusable component library

3. ‚úÖ Type System Enhancement
   - Strict TypeScript configuration
   - Component prop types
   - Event handling types
   - Custom type definitions
   - Null safety improvements

4. ‚úÖ Project Structure
   - Organized component hierarchy
   - Implemented utility functions
   - Structured style files
   - Configured build output
   - Documentation updates

### Current Technology Stack

1. **Core Technologies**
   - Create Figma Plugin
   - TypeScript
   - Preact
   - Tailwind CSS
   - PostCSS
   - esbuild

2. **UI Components**
   - @create-figma-plugin/ui
   - Custom component library
   - Geist font
   - Tailwind CSS utilities

3. **Build Tools**
   - esbuild (through Create Figma Plugin)
   - PostCSS
   - TypeScript compiler
   - ESLint
   - Prettier

4. **Development Tools**
   - VS Code configuration
   - ESLint setup
   - Prettier configuration
   - TypeScript settings

### Removed Technologies
- ‚ùå webpack (replaced by esbuild)
- ‚ùå shadcn/ui (replaced by @create-figma-plugin/ui)
- ‚ùå React (replaced by Preact)
- ‚ùå Custom webpack loaders
- ‚ùå Babel configuration

## Current Status (as of Feb 6, 2025)

#### Build System Updates
- Migrated PostCSS configuration to ES Module format (`postcss.config.mjs`)
- Configured essential PostCSS plugins:
  - postcss-import: For modular CSS imports
  - tailwindcss: For Tailwind CSS processing
  - autoprefixer: For vendor prefix management
- Simplified build pipeline with direct integration between PostCSS and Tailwind CSS
- Maintained backward compatibility with CommonJS format for flexibility

#### Build Process Improvements
- Streamlined CSS processing workflow
- Enhanced module import capabilities
- Improved CSS build performance
- Better integration with modern ES Module ecosystem

### Decision Changes
- Initially planned to use webpack + shadcn/ui
- Switched to Create Figma Plugin due to:
  1. Better integration with Figma's ecosystem
  2. Pre-configured build system with esbuild
  3. Ready-to-use Preact components matching Figma's UI
  4. Production-tested solution

### Implementation Status
1. ‚úÖ Basic project setup with Create Figma Plugin
2. ‚úÖ TypeScript configuration
3. ‚úÖ Preact + Tailwind CSS integration
4. ‚úÖ Project structure cleanup
   - Removed redundant `/dist` directory
   - Configured `/build` as standard output
   - Cleaned up unnecessary files
5. üü° UI Migration (In Progress)
   - Basic UI structure implemented
   - Components rendering properly
   - Event handling partially working
   - Layout and styling needs refinement
6. üü° Plugin Logic Migration (In Progress)
   - Frame properties saving/applying implemented
   - Type safety improvements ongoing
   - Event handling system working

### Current Issues
1. UI Refinement:
   - Dropdown menu positioning and behavior needs improvement
   - Layout spacing and alignment needs adjustment
   - Some components need better styling integration with Figma's UI patterns

2. Plugin Logic:
   - Some type safety improvements still needed
   - Need to verify all frame properties are handled correctly
   - Event system needs more robust error handling

3. Build Configuration:
   ‚úÖ manifest.json configured correctly
   ‚úÖ Build output directory standardized to `/build`
   ‚úÖ Styles bundling working with Tailwind
   ‚úÖ TypeScript configuration verified

### Next Steps
1. UI Polish:
   - Improve dropdown menu behavior
   - Refine layout spacing and alignment
   - Ensure consistent styling with Figma's UI

2. Code Quality:
   - Complete type safety improvements
   - Add error boundaries and better error handling
   - Implement comprehensive validation

3. Testing:
   - Create test cases for each feature
   - Verify UI rendering in both light/dark modes
   - Test frame property handling

### Reference Documentation
- [Create Figma Plugin UI Components](mdc:https:/yuanqing.github.io/create-figma-plugin/ui)
- [Figma Plugin Development Guide](mdc:https:/www.figma.com/plugin-docs)
- [Create Figma Plugin Recipes](mdc:https:/yuanqing.github.io/create-figma-plugin/recipes) 