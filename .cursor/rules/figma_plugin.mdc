---
description: Core guidelines for Figma plugin development and API usage
globs: 
---

> Note: For common rules regarding error handling, performance, input validation, and naming conventions, please refer to [cursor_rules.mdc](mdc:cursor_rules.mdc). The rules defined here are specific to the Figma Plugin context.

# Figma Plugin Development Standards

## Plugin Architecture
- Separate UI and plugin logic
- Use TypeScript for type safety
- Follow event-driven communication
- Implement proper error handling
- Use Create Figma Plugin utilities

## Figma API Usage
- Batch API operations for performance
- Handle API rate limits gracefully
- Implement proper error recovery
- Cache API results when possible
- Use proper type annotations

## Data Management
- Validate all user inputs
- Handle large data sets efficiently
- Implement proper data persistence
- Use proper serialization
- Handle data migration gracefully

## Error Handling (Specific to Figma)
- Use Figma's notification system for error notifications.
> Nota: Per le regole comuni di error handling, si rimanda a [cursor_rules.mdc](mdc:cursor_rules.mdc).

## Performance (Specific to Figma)
- Minimize plugin startup time
- Handle large files efficiently
> Nota: Per le linee guida comuni in tema di performance, si rimanda a [cursor_rules.mdc](mdc:cursor_rules.mdc).

## Security
- Validate all inputs
- Sanitize data before storage
- Handle sensitive data properly
- Follow Figma's security guidelines
- Implement proper access controls

## Plugin Communication
- Use typed messages
- Handle message failures
- Implement proper timeouts
- Validate message data
- Use proper event handling

## Documentation
- Document API usage
- Include code examples
- Document known limitations
- Specify version compatibility
- Include troubleshooting guides 

interface LicenseError {
  code: 'ACTIVATION_LIMIT_REACHED' | 'INVALID_LICENSE' | 'NETWORK_ERROR' | 'API_ERROR';
  message: string;
  actions?: string[];
  managementUrl?: string;
}

interface LicenseStatus {
  tier: 'free' | 'premium';
  isValid: boolean;
  features: string[];
  status: 'idle' | 'processing' | 'error';
  error?: LicenseError;
}

interface LicenseActivationProps {
  currentStatus: LicenseStatus;
  isOpen: boolean;
  onClose: () => void;
  error: LicenseError | null;
  onActivate: (licenseKey: string) => void;
  onDeactivate: () => void;
} 